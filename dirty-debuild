#!/bin/bash

#
# warn_if_bad		Put out warning message(s) if $1 has bad RC.
#
#	$1	0 (pass) or non-zero (fail).
#	$2+	Remaining arguments printed only if the $1 is non-zero.
#
#	Incoming $1 is returned unless it is 0
#
function warn_if_bad()
{
	local -i rc="$1"
	local script="${0##*/}"

	# Ignore if no problems
	[ "${rc}" -eq "0" ] && return 0

	# Broken
	shift
	echo "${script}: $@" >&2
	return "${rc}"
}

#
# exit_if_bad		Put out error message(s) if $1 has bad RC.
#
#	$1	0 (pass) or non-zero (fail).
#	$2+	Remaining arguments printed only if the $1 is non-zero.
#
#               Exits with 1 unless $1 is 0
#
function exit_if_bad()
{
	warn_if_bad "$@" || exit 1
	return 0
}

TMP_DIR=""

function internal_cleanup()
{
	[ -d "${TMP_DIR}" ] && rm -rf "${TMP_DIR}"
}

trap internal_cleanup EXIT

TMP_DIR="$(mktemp -d "/tmp/${0##*/}.XXXXXXXX" 2>/dev/null)"
exit_if_bad "$?" "Above listed required command(s) not found."

# Main
while [ "$#" -gt "0" ]
do
	case "$1" in
	"-h"|"--help")
		echo "Usage: ${0##*/} <fluffos build directory>"
		echo
		echo "Examples:"
		echo "  ${0##*/} build"
		exit 0
		;;
	"+"*)
		VARIANTS="${1:1}"
		;;
	"--all-variants")
		for v in mysql pgsql sqlite3 tiny
		do
			rm -rf build
			fakeroot "${0}" "+${v}"
		done
		exit 0
		;;
	*)
		FLUFFOS_BUILD_DIRECTORY="${1}"
		;;
	esac
	shift
done

BASE_DIR="${0%/*}"

if [ -z "${FLUFFOS_BUILD_DIRECTORY}" ]
then
	"${BASE_DIR}/dirty-build" "${VARIANTS}"
	exit_if_bad "$?" "dirty-build failed."

	FLUFFOS_BUILD_DIRECTORY="build"
fi
VARIANTS="$(cat "${FLUFFOS_BUILD_DIRECTORY}/VARIANTS")"
"${BASE_DIR}/prep-tarball" "${FLUFFOS_BUILD_DIRECTORY}"
exit_if_bad "$?" "prep-tarball failed."

FLUFFOS_REPACK_TARBALL="$(echo "fluffos-${VARIANTS}-repack-"*".tar.gz")"
tmp_b="${FLUFFOS_REPACK_TARBALL##*-}"
tmp_b="${tmp_b%%.*}"
ARCH="${tmp_b}"
VERSION="$(git describe --tags --abbrev=0)"
VERSION="${VERSION//v/}"
if [ -z "${VERSION}" ]
then
	warn_if_bad 1 "failed to get version number"
	VERSION="2019.20201121"
fi

case "${ARCH}" in
"ppc64le")
	ARCH="ppc64el"
	;;
esac

FLUFFOS_PREP_TARBALL="fluffos-${VARIANTS}.tar.gz"
EXTRACT_DIR="fluffos-${VARIANTS}-${VERSION:-0.0.1}"
rm -rf "${EXTRACT_DIR}.orig" "${EXTRACT_DIR}"

ln -s -f "${FLUFFOS_REPACK_TARBALL}" "${FLUFFOS_PREP_TARBALL}"

alien -d -g -c -k --version=${VERSION:-0.0.1} "${FLUFFOS_PREP_TARBALL}"
rm -f "${FLUFFOS_PREP_TARBALL}"

sed -i -e 's/^Copyright: .*$/Copyright: Whatsoever/' \
	"${EXTRACT_DIR}/debian/copyright"
sed -i -e 's/^Architecture: .*$/Architecture: '"${ARCH}"'/' \
	-e 's/^Maintainer: .*$/Maintainer: GONG Jie <neo@quux.me>/' \
	-e '/^Description:/,$d' \
	"${EXTRACT_DIR}/debian/control"
case "${VARIANTS}" in
"mysql")
	cat <<-EOF >>"${EXTRACT_DIR}/debian/control"
	Recommends: default-mysql-server | virtual-mysql-server
	Conflicts: fluffos-pgsql, fluffos-sqlite3, fluffos-tiny
	Description: FluffOS is an LPMUD driver (using MySQL)
	EOF
	;;
"pgsql")
	cat <<-EOF >>"${EXTRACT_DIR}/debian/control"
	Recommends: postgresql
	Conflicts: fluffos-mysql, fluffos-sqlite3, fluffos-tiny
	Description: FluffOS is an LPMUD driver (using PostgreSQL)
	EOF
	;;
"sqlite3")
	cat <<-EOF >>"${EXTRACT_DIR}/debian/control"
	Conflicts: fluffos-mysql, fluffos-pgsql, fluffos-tiny
	Description: FluffOS is an LPMUD driver (using SQLite3)
	EOF
	;;
"tiny")
	cat <<-EOF >>"${EXTRACT_DIR}/debian/control"
	Conflicts: fluffos-mysql, fluffos-pgsql, fluffos-sqlite3
	Description: FluffOS is an LPMUD driver (compact version)
	EOF
	;;
esac

cat <<-EOF >"${EXTRACT_DIR}/debian/changelog"
fluffos-${VARIANTS} (${VERSION:-0.0.1}-snap$(date '+%Y%m%d%H%M')) experimental; urgency=low

  * Converted from .tgz format to .deb by $(alien --version)



 -- GONG Jie <neo@quux.me>  $(date -R)
EOF

#cat <<-EOF >"${EXTRACT_DIR}/debian/postinst"
##!/bin/sh
#
#if [ "\$1" = "configure" ]
#then
#    systemctl daemon-reload
#    systemctl try-restart fluffos.service
#fi
#EOF
#chmod 0755 "${EXTRACT_DIR}/debian/postinst"
#
#cat <<-EOF >"${EXTRACT_DIR}/debian/prerm"
##!/bin/sh
#
#if [ "\$1" = "remove" ]
#then
#    systemctl stop fluffos.service
#    systemctl disable fluffos.service
#fi
#EOF
#chmod 0755 "${EXTRACT_DIR}/debian/prerm"

( cd "${EXTRACT_DIR}" && debian/rules binary )
